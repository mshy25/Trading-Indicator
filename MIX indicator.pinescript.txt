bars_back = 500
//@version=5
indicator("BB,RangeBox,GS,OB", overlay=true, max_bars_back=500, max_labels_count=100, max_lines_count=100)

// Bollinger Bands
length = input.int(20, "Length", minval=1)
mult = input.float(2.0, "Multiplier", minval=0.1)

source = close
basis = ta.sma(source, length)
deviation = mult * ta.stdev(source, length)

upper_band = basis + deviation
lower_band = basis - deviation

plot(basis, color=color.blue, title="Basis")
plot(upper_band, color=color.red, title="Upper Band")
plot(lower_band, color=color.green, title="Lower Band")

// Range Box
maxBars = 1000

var GRP1 = "Settings"
showLines = input(title='Show Lines ?', defval=true, group=GRP1)
showBackground = input(title='Show Background ?', defval=true, group=GRP1)
showMiddleLine = input(title='Show Middle Line ?', defval=true, group=GRP1)
extendLines = input(title='Extend Lines ?', defval=true, group=GRP1)
rangeTime = input.session(title='Session Time', defval='1700-0259', group=GRP1)
extendTime = input.session(title='Extended Lines Time', defval='0300-1659', group=GRP1)

var GRP2 = "Styles"
linesWidth = input.int(2, 'Box And Lines Width ?', minval=1, maxval=4, group=GRP2)
boxLineColor = input(color.blue, 'Box and H/L Line Color', group=GRP2)
middleLineColor = input(color.red, 'Middle Line Color', group=GRP2)
backgroundColor = input(color.new(color.aqua, 90), 'Box Background Color', group=GRP2)

inSession = not na(time(timeframe.period, rangeTime))
inExtend = not na(time(timeframe.period, extendTime))

startTime = 0
startTime := inSession and not inSession[1] ? time : startTime[1]

// Box lines
var line lowHLine = na
var line topHLine = na
var line leftVLine = na
var line rightVLine = na
var line middleHLine = na
var box bgBox = na

var low_val = 0.0
var high_val = 0.0
if inSession and not inSession[1]
    low_val := low
    high_val := high
    high_val

// Plot lines
if inSession and timeframe.isintraday
    if inSession[1]
        line.delete(lowHLine)
        line.delete(topHLine)
        line.delete(leftVLine)
        line.delete(rightVLine)
        line.delete(middleHLine)
        box.delete(bgBox)

    if low < low_val
        low_val := low
        low_val
    if high > high_val
        high_val := high
        high_val

    // Create Box
    // x1, y1, x2, y2
    if showBackground
        bgBox := box.new(startTime, high_val, time, low_val, xloc=xloc.bar_time, bgcolor=backgroundColor, border_width=0)

    if showLines
        lowHLine := line.new(startTime, low_val, time, low_val, xloc=xloc.bar_time, color=boxLineColor, style=line.style_solid, width=linesWidth)
        topHLine := line.new(startTime, high_val, time, high_val, xloc=xloc.bar_time, color=boxLineColor, style=line.style_solid, width=linesWidth)
        leftVLine := line.new(startTime, high_val, startTime, low_val, xloc=xloc.bar_time, color=boxLineColor, style=line.style_solid, width=linesWidth)
        rightVLine := line.new(time, high_val, time, low_val, xloc=xloc.bar_time, color=boxLineColor, style=line.style_solid, width=linesWidth)

    // Create Middle line
    if showMiddleLine
        middleHLine := line.new(startTime, (high_val + low_val) / 2, time, (high_val + low_val) / 2, xloc=xloc.bar_time, color=middleLineColor, style=line.style_dotted, width=linesWidth)

else
    if inExtend and extendLines and not inSession and timeframe.isintraday
        time1 = line.get_x1(lowHLine)
        time2 = line.get_x2(lowHLine)
        price = line.get_y1(lowHLine)
        line.delete(lowHLine)
        lowHLine := line.new(time1, price, time, price, xloc=xloc.bar_time, color=boxLineColor, style=line.style_solid, width=linesWidth)
        
        time1 := line.get_x1(topHLine)
        time2 := line.get_x2(topHLine)
        price := line.get_y1(topHLine)
        line.delete(topHLine)
        topHLine := line.new(time1, price, time, price, xloc=xloc.bar_time, color=boxLineColor, style=line.style_solid, width=linesWidth)

        time1 := line.get_x1(middleHLine)
        time2 := line.get_x2(middleHLine)
        price := line.get_y1(middleHLine)
        line.delete(middleHLine)
        middleHLine := line.new(time1, price, time, price, xloc=xloc.bar_time, color=middleLineColor, style=line.style_dotted, width=linesWidth)
        middleHLine

///////////////////////////////////// GANSS SQUARE  CODE///////////////////////////////
RedGan = input(true, "On/Off Red line")
BlueGan = input(true, "On/Off Blue line")
labelOn = input(true, "On/Off Label")
LabelColor = input.color(color.black, "Label color")
BlueLineColor = input.color(color.blue, "Blue Line color")
RedLineColor = input.color(color.red, "Red Line color")
Extend = input(true, "Extend line")
PriceLevel = input.int(3, "Price Level", options=[3, 5])

var label rl1 = na
var label rl2 = na
var label sl1 = na
var label bl1 = na
var label bl2 = na
label.delete(rl1)
label.delete(rl2)
label.delete(sl1)
label.delete(bl1)
label.delete(bl2)

drawLine(resistance, start, end, extend, linecolor) =>
    var line gannLine = line.new(x1=start, y1=resistance, x2=end, y2=resistance, color=linecolor)
    if extend
        line.set_extend(gannLine, extend=extend.right)
    gannLine

drawLabel(x, y, labelText) =>
    var label GannLabel = label.new(x, y, labelText, xloc=xloc.bar_time, style=label.style_none)
    GannLabel

max = 20
rangeMin = 0
var float[] GannNum = array.new_float(0)
dt = time - time[1]
labelPosition = time + 3 * dt

if barstate.islast
    for min = rangeMin to max
        for i = 0 to 3
            float gNum = na
            if min == rangeMin and i == 0
                gNum := min + (min + 2)
            else if min > rangeMin and i == 0
                gNum := math.round(array.get(GannNum, array.size(GannNum) - 1)) + (min + 1) + min
            else
                gNum := math.round(array.get(GannNum, array.size(GannNum) - 1)) + (min + 2) + min
            array.push(GannNum, gNum)

    maxItem = array.size(GannNum) - 1
    next = 0
    float denomenator = na
    if close[0] >= 10000
        denomenator := 0.01
    else if close[0] >= 1000
        denomenator := 0.1
    else if close[0] >= 100
        denomenator := 1
    else if close[0] >= 10
        denomenator := 10
    else if close[0] >= 0.05
        denomenator := 100
    else
        denomenator := 1000

    price = close[0] * denomenator
    float resistance = na
    float support = na
    float blueGannPrice1 = na
    GannPos = 0
    for i = 0 to array.size(GannNum) - 1
        if i == maxItem
            next := i
        else
            next := i + 1
            
        if array.get(GannNum, i) <= price and array.get(GannNum, next) > price
            resistance := array.get(GannNum, next) / denomenator
            support := array.get(GannNum, i) / denomenator
            blueGannPrice1 := (support + resistance) / 2
            GannPos := i
            break

    startLine = bar_index
    endLine = bar_index + 10
    GannWeightPosition = close[0] >= blueGannPrice1 ? 2 : -1

    if RedGan
        resistance1 = drawLine(resistance, startLine, endLine, Extend, RedLineColor)
        support1 = drawLine(support, startLine, endLine, Extend, RedLineColor)
        if labelOn
            rl1 := drawLabel(labelPosition, resistance, "\nR1 = " + str.tostring(resistance))
            label.set_textcolor(rl1, LabelColor)
            sl1 := drawLabel(labelPosition, support, "\nS1 = " + str.tostring(support))
            label.set_textcolor(sl1, LabelColor)
        if PriceLevel == 5
            resistancePrice2 = array.get(GannNum, GannPos + GannWeightPosition) / denomenator
            resistance2 = drawLine(resistancePrice2, startLine, endLine, Extend, RedLineColor)
            if labelOn
                resistanceText2 = GannWeightPosition > 0 ? "\nR2 = " : "\nS2 = "
                rl2 := drawLabel(labelPosition, resistancePrice2, resistanceText2 + str.tostring(resistancePrice2))
                label.set_textcolor(rl2, LabelColor)

    if BlueGan
        blueGann1 = drawLine(blueGannPrice1, startLine, endLine, Extend, BlueLineColor)
        if labelOn
            BlueText1 = close[0] >= blueGannPrice1 ? "\nS1 = " : "\nR1 = "
            bl1 := drawLabel(labelPosition, blueGannPrice1, BlueText1 + str.tostring(blueGannPrice1))
            label.set_textcolor(bl1, LabelColor)
        if PriceLevel == 5
            BlueGannPrice2 = GannWeightPosition > 0 ? (array.get(GannNum, GannPos + 1) + array.get(GannNum, GannPos + 2)) / 2 : (array.get(GannNum, GannPos - 1) + array.get(GannNum, GannPos)) / 2
            BlueGannPrice2 := BlueGannPrice2 / denomenator
            blueGann2 = drawLine(BlueGannPrice2, startLine, endLine, Extend, BlueLineColor)
            if labelOn
                BlueText2 = GannWeightPosition > 0 ? "\nR1 = " : "\nS1 = "
                bl2 := drawLabel(labelPosition, BlueGannPrice2, BlueText2 + str.tostring(BlueGannPrice2))
                label.set_textcolor(bl2, LabelColor)
//////////////////////////Order Bloc code////////////////////////////


// -----------------------------------------------------------------------------------------------
// ----------------------------------   FRACTAL RANGE   ------------------------------------------
// -----------------------------------------------------------------------------------------------  

temp0 = input(title='••••••••••••••••••• Fractals ••••••••••••••••••••••', defval=false)
showFractals = input(title='Show Fractal Points ?', defval=false)
filterFractal = input.string(title='Filter 3/5 bar fractal', defval='3', options=['3', '5'])

temp1 = input(title='••••••••••••••••••• Orderblocks •••••••••••••••••••', defval=false)
findObType = input.string(title='Find OB after fractal break of close/HL', defval='Close', options=['Close', 'HL'])
filterFvgs = input(title='Filter only OB that follow with FVG ?', defval=true)
fvgDistance = input.int(3, title='Max bars between the OB and FVG', minval=1, maxval=6)
lineHeight = input.string(title='Line Height', defval='Body', options=['Body', 'Wick'])
delLines = input(title='Delete lines after fill ?', defval=true)

temp3 = input(title='•••••••••••••••••••• Styles ••••••••••••••••••••••••', defval=false)
lines_style = input.string(title='Lines style', defval='Solid', options=['Solid', 'Dashed', 'Dotted'])
line_length = input.int(5, 'Length of lines', minval=1, maxval=100)
lineStyle = lines_style == 'Solid' ? line.style_solid : lines_style == 'Dashed' ? line.style_dashed : line.style_dotted
linesWidt = input.int(2, 'Lines Width ?', minval=1, maxval=4)
bear_line_color = input(color.red, 'Bear OB Line color')
bull_line_color = input(color.blue, 'Bull OB Line color')



// -------------------- FUNCTIONS --------------------
bullishImb(i=0) => close[i+1] > high[i+2] and low[i] > high[i+2]
bearishImb(i=0) => close[i+1] < low[i+2] and high[i] < low[i+2]

//  Fractals
isRegularFractal(mode) =>
    ret = mode == 'Buy' ? high[0] < high[1] and (high[2] < high[1] or high[2] == high[1] and high[3] < high[2]) : mode == 'Sell' ? low[0] > low[1] and (low[2] > low[1] or low[2] == low[1] and low[3] > low[2]) : false
    ret

isBWFractal(mode) =>
    ret = mode == 'Buy' ? high[0] < high[2] and high[1] < high[2] and high[3] < high[2] and high[4] < high[2] : mode == 'Sell' ? low[0] > low[2] and low[1] > low[2] and low[3] > low[2] and low[4] > low[2] : false
    ret

isFractalHigh() =>
    filterFractal == '3' ? isRegularFractal('Buy') : isBWFractal('Buy')

isFractalLow() =>
    filterFractal == '3' ? isRegularFractal('Sell') : isBWFractal('Sell')

resolutionInMinutes() =>
    resInMinutes = timeframe.multiplier * (timeframe.isseconds ? 1. / 60 : timeframe.isminutes ? 1. : timeframe.isdaily ? 60. * 24 : timeframe.isweekly ? 60. * 24 * 7 : timeframe.ismonthly ? 60. * 24 * 30.4375 : na)
    resInMinutes

f_timeFrom(_from, length, _units, i) =>
    int _timeFrom = na
    _unit = str.replace_all(_units, 's', '')
    _timeFrom := int(time[i] + resolutionInMinutes() * 60 * 1000 * length)
    _timeFrom
// -------------------- FUNCTIONS --------------------



// -------------------- Fractals --------------------
fractal_high_val = 0.0
fractal_low_val = 0.0

var fractal_highs = array.new_float(0)  // array of high fractal values
var fractal_high_times = array.new_int(0)  // array of high fractal times
var fractal_lows = array.new_float(0)  // array of low fractal values
var fractal_low_times = array.new_int(0)  // array or low fractal times

// Check if fractal and add it to array
if isFractalHigh()
    if filterFractal == '3'
        array.push(fractal_highs, high[1])
        array.push(fractal_high_times, time[1])
        fractal_high_val := high[1]
        fractal_high_val
    else
        array.push(fractal_highs, high[2])
        array.push(fractal_high_times, time[2])
        fractal_high_val := high[2]
        fractal_high_val

if isFractalLow()
    if filterFractal == '3'
        array.push(fractal_lows, low[1])
        array.push(fractal_low_times, time[1])
        fractal_low_val := low[1]
        fractal_low_val
    else
        array.push(fractal_lows, low[2])
        array.push(fractal_low_times, time[2])
        fractal_low_val := low[2]
        fractal_low_val
// -------------------- Fractals --------------------



// -------------------- Orderblocks --------------------
var line1 = array.new_line()
var line2 = array.new_line()
var line3 = array.new_line()
var line4 = array.new_line()

var label1 = array.new_label()
var label2 = array.new_label()

// Bearish loop
if array.size(fractal_lows) > 0
    for i = array.size(fractal_lows) - 1 to 0 by 1
        if (findObType == 'Close' ? close : low) < array.get(fractal_lows, i)
            idx = 0
            max = low  //current low
            gapIndex = 0

            for k = 0 to bars_back by 1
                bearishGap = (close[k+1] < low[k+2]) and (high[k] < low[k+2])

                //stop loop if reached time limit
                if time[k] < array.get(fractal_low_times, i)
                    break

                //Get all bullish candles in range
                if close[k] > open[k] and high[k] > max
                    idx := k
                    max := high[k]
                    
                if bearishGap and high[k] > max
                    gapIndex := k+2

            _filterFvg = filterFvgs ? gapIndex > 0 and idx - gapIndex >= 0 and idx - gapIndex <= fvgDistance  : true
            // Line on OB
            if idx != 0 and _filterFvg
                // label.new(bar_index, high, str.tostring(idx) + "\n" + str.tostring(gapIndex))
                TimeTo = f_timeFrom('bar', line_length, 'chart', idx)
                loc = lineHeight == 'Body' ? open[idx] : low[idx]

                array.push(line1, line.new(x1=time[idx], y1=high[idx], x2=TimeTo, y2=high[idx], xloc=xloc.bar_time, style=lineStyle, color=bear_line_color, width=linesWidt))
                array.push(line2, line.new(x1=time[idx], y1=loc, x2=TimeTo, y2=loc, xloc=xloc.bar_time, style=lineStyle, color=bear_line_color, width=linesWidt))

            array.remove(fractal_lows, i)
            array.remove(fractal_low_times, i)

// Bullish loop
if array.size(fractal_highs) > 0
    for i = array.size(fractal_highs) - 1 to 0 by 1
        if (findObType == 'Close' ? close : high) > array.get(fractal_highs, i)
            idx = 0
            min = low
            gapIndex = 0

            for k = 0 to bars_back by 1
                bullishGap = (close[k+1] > high[k+2]) and (low[k] > high[k+2])

                // Stop the loop once its reached the last fractal high
                if time[k] < array.get(fractal_high_times, i)
                    break

                //  if bearish candle
                if close[k] < open[k] and low[k] < min
                    idx := k
                    min := low[k]

                if bullishGap
                    gapIndex := k+2


            _filterFvg = filterFvgs ? gapIndex > 0 and idx - gapIndex >= 0 and idx - gapIndex <= fvgDistance  : true
            // Line on OB
            if idx != 0 and _filterFvg
                // label.new(bar_index, high, str.tostring(idx) + "\n" + str.tostring(gapIndex))
                TimeTo = f_timeFrom('bar', line_length, 'chart', idx)
                loc = lineHeight == 'Body' ? open[idx] : high[idx]
                
                array.push(line3, line.new(x1=time[idx], y1=low[idx], x2=TimeTo, y2=low[idx], xloc=xloc.bar_time, style=lineStyle, color=bull_line_color, width=linesWidt))
                array.push(line4, line.new(x1=time[idx], y1=loc, x2=TimeTo, y2=loc, xloc=xloc.bar_time, style=lineStyle, color=bull_line_color, width=linesWidt))

            array.remove(fractal_highs, i)
            array.remove(fractal_high_times, i)

// -------------------- Orderblocks --------------------

//Delete Lines/Labels
if array.size(line1) > 0
    for i = array.size(line1) - 1 to 0 by 1
        if high >= line.get_y1(array.get(line1, i)) and high >= line.get_y1(array.get(line2, i))
            if delLines
                line.delete(array.get(line1, i))
                line.delete(array.get(line2, i))
                //label.delete(array.get(label1, i))
            array.remove(line1, i)
            array.remove(line2, i)
            //array.remove(label1,i)

if array.size(line3) > 0
    for i = array.size(line3) - 1 to 0 by 1
        if low <= line.get_y1(array.get(line3, i)) and low <= line.get_y1(array.get(line4, i))
            if delLines
                line.delete(array.get(line3, i))
                line.delete(array.get(line4, i))
                //label.delete(array.get(label2, i))
            array.remove(line3, i)
            array.remove(line4, i)
            //array.remove(label2,i)

//Plot fractal points            
plotshape(showFractals and isFractalHigh(), title='Fractal High', style=shape.triangledown, location=location.abovebar, color=color.new(color.red, 0), offset=filterFractal == '3' ? -1 : -2, size=size.auto)
plotshape(showFractals and isFractalLow(), title='Fractal Low', style=shape.triangleup, location=location.belowbar, color=color.new(color.blue, 0), offset=filterFractal == '3' ? -1 : -2, size=size.auto)


// WATERMARK
if barstate.islast    
    _table = table.new("bottom_left", 1, 2)
    table.cell(_table, 0, 0, text="@Nephew_Sam_", text_size=size.small, text_color=color.new(color.gray, 50))